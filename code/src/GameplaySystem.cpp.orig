
#include "GameplaySystem.hpp"
#include <common.h>
#include <Program.h>

#include <iostream>

#include "core.h"
#include "GameState.hpp"
#include "Entity.hpp"

#include <glm/gtc/matrix_transform.hpp>

#define GLM_ENABLE_EXPERIMENTAL
#include <glm/gtx/quaternion.hpp>

#include "components/Geometry.hpp"
#include "components/SimpleComponents.hpp"
<<<<<<< HEAD
#include "components/Lights.h"
=======
#include "components/AnimationComponents.hpp"

#define SPEED .01f
#define SWARM_RADIUS .1f
#define FISH_RADIUS .2f
#define NUM_FISH 25
#define DEPTH 10
#define BAIT_RADIUS .5f


// Disable complaints about all the placeholder functions
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
#include "components/LightingComponents.hpp"
>>>>>>> MergeGameplay

using namespace std;

// draw Functions start general and get more specific

static void checkEatZone(int fish, Entity* entity, int numFish, float ***fishLoc, float ***headLoc, float dt, GameState &gstate);

static void updateGame(Entity* entity, double dt, float ***fishLoc, float ***headLoc, GLFWwindow* window, GameState &gstate);

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        // SwarmSystem functions
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

void GameplaySystem::update(ApplicationState &appstate, GameState &gstate, double elapsedTime, float ***fishLoc, float ***headLoc){
  gstate.levelProgress = gstate.gameTime.get() * 1.0/3.0;

  Entity* sun = gstate.activeScene->getFirstWithComponent<SunLight>();
  SunLight* suncmpnt = sun->getFirstComponentType<SunLight>();
<<<<<<< HEAD
  suncmpnt->setLocation(vec3(0.0, 10.0, 0.0) + -gstate.levelDirection*static_cast<float>(gstate.levelProgress));
=======
  suncmpnt->location = vec3(0.0, 10.0, 0.0) + -gstate.levelDirection*static_cast<float>(gstate.levelProgress);
  
  for(pair<const Entity*, Entity*> entpair : gstate.activeScene->entities){
    updateGame(entpair.second, elapsedTime, fishLoc, headLoc, appstate.window, gstate);
  }
>>>>>>> MergeGameplay
}

static void updateGame(Entity* entity, double dt, float ***fishLoc, float ***headLoc, GLFWwindow* window, GameState &gstate) {
  Pose* pose = NULL;
  Swarmable* swarm = NULL;

  for(Component *cmpnt : entity->components){
    GATHER_SINGLE_COMPONENT(pose, Pose*, cmpnt);
    GATHER_SINGLE_COMPONENT(swarm, Swarmable*, cmpnt);
    if(pose && swarm){
      checkEatZone(swarm->fishNum, entity, NUM_FISH, fishLoc, headLoc, dt, gstate);
    }
  }

}

static void checkEatZone(int fish, Entity* entity, int numFish, float ***fishLoc, float ***headLoc, float dt, GameState &gstate) { // .56, 3.2
  if (distance(vec2((*fishLoc)[fish][0],(*fishLoc)[fish][1]), vec2(-.6, 3.17)) < .25f) {
    entity->isActive = false;
    gstate.activeScene->submitToKill(entity);
  }
}

